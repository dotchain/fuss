// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
// Code generated by /Users/vkvk/dev/go/src/github.com/dotchain/fuss/todo/controls/codegen.go. DO NOT EDIT.

package controls

import (
	"github.com/dotchain/fuss/core"
	"github.com/dotchain/fuss/dom"
)

type chromeCtx struct {
	core.Cache
	finalizer func()

	initialized  bool
	stateHandler core.Handler

	dom struct {
		dom.FixedStruct
		dom.StretchStruct
		dom.VRunStruct
	}
	memoized struct {
		body    dom.Element
		footer  dom.Element
		header  dom.Element
		result1 dom.Element
	}
}

func (c *chromeCtx) areArgsSame(header dom.Element, body dom.Element, footer dom.Element) bool {

	if header != c.memoized.header {
		return false
	}

	if body != c.memoized.body {
		return false
	}

	return footer == c.memoized.footer

}

func (c *chromeCtx) refreshIfNeeded(header dom.Element, body dom.Element, footer dom.Element) (result1 dom.Element) {
	if !c.initialized || !c.areArgsSame(header, body, footer) {
		return c.refresh(header, body, footer)
	}
	return c.memoized.result1
}

func (c *chromeCtx) refresh(header dom.Element, body dom.Element, footer dom.Element) (result1 dom.Element) {
	c.initialized = true
	c.stateHandler.Handle = func() {
		c.refresh(header, body, footer)
	}

	c.memoized.header, c.memoized.body, c.memoized.footer = header, body, footer

	c.Cache.Begin()
	defer c.Cache.End()

	c.dom.FixedStruct.Begin()
	defer c.dom.FixedStruct.End()

	c.dom.StretchStruct.Begin()
	defer c.dom.StretchStruct.End()

	c.dom.VRunStruct.Begin()
	defer c.dom.VRunStruct.End()
	c.memoized.result1 = chrome(c, header, body, footer)

	return c.memoized.result1
}

func (c *chromeCtx) close() {
	c.Cache.Begin()
	c.Cache.End()

	c.dom.FixedStruct.Begin()
	c.dom.FixedStruct.End()

	c.dom.StretchStruct.Begin()
	c.dom.StretchStruct.End()

	c.dom.VRunStruct.Begin()
	c.dom.VRunStruct.End()
	if c.finalizer != nil {
		c.finalizer()
	}
}

// ChromeStruct is a cache for Chrome
// Chrome renders the app chrome
type ChromeStruct struct {
	old, current map[interface{}]*chromeCtx
}

// Begin starts a round
func (c *ChromeStruct) Begin() {
	c.old, c.current = c.current, map[interface{}]*chromeCtx{}
}

// End finishes the round cleaning up any unused components
func (c *ChromeStruct) End() {
	for _, ctx := range c.old {
		ctx.close()
	}
	c.old = nil
}

// Chrome - see the type for details
func (c *ChromeStruct) Chrome(cKey interface{}, header dom.Element, body dom.Element, footer dom.Element) (result1 dom.Element) {
	cOld, ok := c.old[cKey]
	if ok {
		delete(c.old, cKey)
	} else {
		cOld = &chromeCtx{}
	}
	c.current[cKey] = cOld
	return cOld.refreshIfNeeded(header, body, footer)
}
