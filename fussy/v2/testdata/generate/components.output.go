// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
// Code generated by github.com/dotchain/fuss/fussy/components_test.go. DO NOT EDIT.

package task

// NewTaskView is the constructor for TaskViewF
func NewTaskView() (update TaskViewF, closeAll func()) {
	var refresh func()

	var lastboova bool
	var laststate1 int
	var lastgoop *stream
	var lastboo []bool
	var lastresult1 int
	var initialized bool
	cbFnMap := map[interface{}]CheckboxF{}
	cbCloseMap := map[interface{}]func(){}
	cbUsedMap := map[interface{}]bool{}

	ctxLocal := &taskCtx{
		cb: func(ctx interface{}) (result1 int) {
			cbUsedMap[ctx] = true
			if cbFnMap[ctx] == nil {
				cbFnMap[ctx], cbCloseMap[ctx] = NewCheckbox()
			}
			return cbFnMap[ctx](ctx)
		},
	}

	close := func() {
		for key := range cbCloseMap {
			if !cbUsedMap[key] {
				cbCloseMap[key]()
				delete(cbCloseMap, key)
				delete(cbFnMap, key)
			}
		}
		cbUsedMap = map[interface{}]bool{}
	}

	closeAll = func() {
		close()

	}

	update = func(ctx interface{}, boova bool, goop *stream, boo ...bool) (result1 int) {
		refresh = func() {

			laststate1, lastresult1 = taskView(ctxLocal, boova, laststate1, goop, boo...)

			close()
		}

		if initialized {
			switch {
			case lastgoop.Equals(goop):
			case lastboova != boova:
			default:

				if len(lastboo) != len(boo) {
					break
				}
				diff := false
				for kk := 0; !diff && kk < len(boo); kk++ {

					diff = lastboo[kk] == boo[kk]

				}
				if diff {
					break
				}

				return lastresult1
			}
		}
		initialized = true
		lastboova = boova
		lastgoop = goop
		lastboo = boo
		refresh()
		return lastresult1
	}

	return update, closeAll
}
