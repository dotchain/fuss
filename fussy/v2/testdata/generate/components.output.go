// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
// Code generated by github.com/dotchain/fuss/fussy/components_test.go. DO NOT EDIT.

package task

// NewTaskView is the constructor for TaskViewF
func NewTaskView() (update TaskViewF, close func()) {
	var lastboo bool
	var lastchildren []int
	var lastresult1 int
	var initialized bool
	cbFnMap := map[interface{}]dom.CheckboxF{}
	cbCloseMap := map[interface{}]func(){}
	cbUsedMap := map[interface{}]bool{}

	ctxLocal := &taskCtx{
		cb: func(ctx interface{}, boo bool) (result1 int) {
			cbUsedMap[ctx] = true
			if cbFnMap[ctx] == nil {
				cbFnMap[ctx], cbCloseMap[ctx] = dom.NewCheckbox()
			}
			return cbFnMap[ctx](ctx, boo)
		},
	}

	close = func() {
		for key := range cbCloseMap {
			if !cbUsedMap[key] {
				cbCloseMap[key]()
				delete(cbCloseMap, key)
				delete(cbFnMap, key)
			}
		}
		cbUsedMap = map[interface{}]bool{}
	}

	update = func(ctx interface{}, boo bool, children []int) (result1 int) {
		if initialized {
			switch {

			case lastboo != boo:
			case lastchildren != children:
			default:
				return lastresult1
			}
		}
		initialized = true
		lastboo = boo
		lastchildren = children
		lastresult1 = taskView(ctxLocal, boo, children)
		close()
		return lastresult1
	}

	return update, close
}

type equals interface {
	Equals(o interface{}) bool
}
