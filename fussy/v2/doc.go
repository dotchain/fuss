// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

// Package fussy implements code parsing and generation for fuss.
//
// The code generation emits boilerplate code for converting regular
// types into streams and simple reactive functions into reactive
// components.
//
// The parser parses reactive functions to figure out the information
// needed to generate the associated boilerplate.  Similar
// functionality for streams is not yet implemented.
//
// Parser
//
// A component in FUSS requires four things: the function implementing
// the component, its dependencies laid out in a struct, the public
// signature for the function and a constructor which creates the
// component.  The first three are expected to be done by the author
// while the last is auto-generated by fussy.  The parser can scan
// through any package figuring out the missing constructors.
//
// A sample component illustrating the three parts above would look
// like this:
//
//    type ComponentFunc = func(key interface{}, args...) results
//    func component(d *dependencies, args ...) results {
//         ... d.dependency1(...) ...
//    }
//
//    type dependencies struct {
//         dependency1 DependentComponentFunc
//         ...
//    }
//
//
// When fussy.ParseDir(..) is called on the above, it returns a
// component info which when used with fussy.Generate() will yield a
// constructor like so:
//
//    func NewComponent() (update ComponentFunc, close func() {
//    ...
//    }
//
// This implementation above, when used, will automatically ensure
// that subsequent calls to update will only rebuild the parts that
// changed.  This is done by creating a dependencies struct which
// themselves use their corresponding constructors to create enough
// state to only repeat parts of the sub-computation as needed.
//
// Generator
//
//
// The generator returns a string representation of a Go file filling
// in streams and components.  Streams allow fields and array elements
// to create new sub-streams.
//
// TODO describe streams
package fussy
