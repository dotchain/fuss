// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.

package fussy

import "text/template"

var componentsTpl = template.Must(template.New("code").Parse(`
{{- range .Components}}

// {{.Ctor}} is the constructor for {{.Type}}
func {{.Ctor}}() (update {{.Type}}, closeAll func()) {
	var refresh func()

	{{ range .NonContextArgsArray }}var last{{.Name}} {{.Type}};{{end}}
	{{ range .PublicResultsArray}}var last{{.Name}} {{.Type}};{{end}}
	var initialized bool
	{{- range .Subs}}
	{{.LocalName}}FnMap := map[interface{}]{{.Type}}{}
	{{.LocalName}}CloseMap := map[interface{}]func(){}
	{{.LocalName}}UsedMap := map[interface{}]bool{}
	{{end}}

	{{.ContextName}}Local := &{{.ContextType}}{
		{{- range  .Subs}}
		{{.LocalName}}: func({{.PublicArgsDecl}}) {{.PublicResultsDecl}} {
			{{.LocalName}}UsedMap[{{.ContextName}}] = true
			if {{.LocalName}}FnMap[{{.ContextName}}] == nil {
				{{.LocalName}}FnMap[{{.ContextName}}], {{.LocalName}}CloseMap[{{.ContextName}}] = {{.Ctor}}()
			}
			return {{.LocalName}}FnMap[{{.ContextName}}]({{.PublicArgs}})
		},
		{{end -}}
	}

	close := func() {
		{{- range  .Subs}}
		for key := range {{.LocalName}}CloseMap {
			if !{{.LocalName}}UsedMap[key] {
				{{.LocalName}}CloseMap[key]()
				delete({{.LocalName}}CloseMap, key)
				delete({{.LocalName}}FnMap, key)
			}
		}
		{{.LocalName}}UsedMap = map[interface{}]bool{}
		{{end -}}
	}

	closeAll = func() {
		close()
		{{range .NonContextArgsArray}}{{if .ImplementsClose}}{{if .IsState}}last{{.Name}}.Close(); {{end}}{{end}}{{end}}
		{{range .StreamStateArgs}}
		if last{{.Name}} != nil {
			last{{.Name}}.Stream.Nextf(&initialized, nil)
		} {{end}}
	}

	update = func({{.PublicArgsDecl}}) {{.PublicResultsDecl}} {
		refresh = func() { 
			{{range .StreamStateArgs}}
			if last{{.Name}} != nil {
				last{{.Name}} = last{{.Name}}.Latest()
				last{{.Name}}.Stream.Nextf(&initialized, nil)
			} {{end}}
			{{.Invoke}}
			{{range .StreamStateArgs}}
			if last{{.Name}} != nil  {
				last{{.Name}} = last{{.Name}}.Latest()
				last{{.Name}}.Stream.Nextf(&initialized, refresh)
			} {{end}}
			close() 
		}

		if initialized {
			switch {
			{{range .PublicArgsArrayEquals}}case last{{.Name}}.Equals({{.Name}}): {{end}}
			{{range .PublicArgsArrayOther}}case last{{.Name}} != {{.Name}}: {{end}}
			default:
				{{if .Variadic}}
				if len(last{{.LastArg.Name}})  != len({{.LastArg.Name}}) { break; }
				diff := false
				for kk :=  0; !diff && kk < len({{.LastArg.Name}}); kk ++ {
					{{if .LastArg.ImplementsEquals}}
					diff = !last{{.LastArg.Name}}[kk].Equals({{.LastArg.Name}}[kk])
					{{else}}
					diff = last{{.LastArg.Name}}[kk] != {{.LastArg.Name}}[kk]
					{{end}}
				}
				if diff {  break }
				{{end}}
				return {{.LastPublicResults}}
			}
		}
		initialized = true
		{{range .PublicArgsArray}}last{{.Name}} = {{.Name}};{{end}}
		refresh()
		return {{.LastPublicResults}}
	}

	return update, closeAll
}
{{end -}}
`))

var headerTpl = template.Must(template.New("code").Parse(`
// Copyright (C) 2019 rameshvk. All rights reserved.
// Use of this source code is governed by a MIT-style license
// that can be found in the LICENSE file.
//
// Code generated by {{.Generator}}. DO NOT EDIT.

package {{.Package}}

import (
  {{range $import := .Imports}}{{index $import 0}} "{{index $import 1}}"
  {{end -}}
)
`))
